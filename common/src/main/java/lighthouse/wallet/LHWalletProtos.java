// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wallet-extension.proto

package lighthouse.wallet;

public final class LHWalletProtos {
  private LHWalletProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ExtensionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .lighthouse.Pledge pledges = 1;
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    java.util.List<lighthouse.protocol.LHProtos.Pledge> 
        getPledgesList();
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    lighthouse.protocol.LHProtos.Pledge getPledges(int index);
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    int getPledgesCount();
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
        getPledgesOrBuilderList();
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    lighthouse.protocol.LHProtos.PledgeOrBuilder getPledgesOrBuilder(
        int index);

    // repeated .lighthouse.Project projects = 2;
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    java.util.List<lighthouse.protocol.LHProtos.Project> 
        getProjectsList();
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    lighthouse.protocol.LHProtos.Project getProjects(int index);
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    int getProjectsCount();
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    java.util.List<? extends lighthouse.protocol.LHProtos.ProjectOrBuilder> 
        getProjectsOrBuilderList();
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    lighthouse.protocol.LHProtos.ProjectOrBuilder getProjectsOrBuilder(
        int index);

    // repeated .lighthouse.Pledge revoked_pledges = 3;
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    java.util.List<lighthouse.protocol.LHProtos.Pledge> 
        getRevokedPledgesList();
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    lighthouse.protocol.LHProtos.Pledge getRevokedPledges(int index);
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    int getRevokedPledgesCount();
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
        getRevokedPledgesOrBuilderList();
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    lighthouse.protocol.LHProtos.PledgeOrBuilder getRevokedPledgesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Extension}
   */
  public static final class Extension extends
      com.google.protobuf.GeneratedMessage
      implements ExtensionOrBuilder {
    // Use Extension.newBuilder() to construct.
    private Extension(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Extension(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Extension defaultInstance;
    public static Extension getDefaultInstance() {
      return defaultInstance;
    }

    public Extension getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Extension(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                pledges_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Pledge>();
                mutable_bitField0_ |= 0x00000001;
              }
              pledges_.add(input.readMessage(lighthouse.protocol.LHProtos.Pledge.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                projects_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Project>();
                mutable_bitField0_ |= 0x00000002;
              }
              projects_.add(input.readMessage(lighthouse.protocol.LHProtos.Project.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                revokedPledges_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Pledge>();
                mutable_bitField0_ |= 0x00000004;
              }
              revokedPledges_.add(input.readMessage(lighthouse.protocol.LHProtos.Pledge.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          pledges_ = java.util.Collections.unmodifiableList(pledges_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          projects_ = java.util.Collections.unmodifiableList(projects_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          revokedPledges_ = java.util.Collections.unmodifiableList(revokedPledges_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return lighthouse.wallet.LHWalletProtos.internal_static_Extension_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return lighthouse.wallet.LHWalletProtos.internal_static_Extension_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              lighthouse.wallet.LHWalletProtos.Extension.class, lighthouse.wallet.LHWalletProtos.Extension.Builder.class);
    }

    public static com.google.protobuf.Parser<Extension> PARSER =
        new com.google.protobuf.AbstractParser<Extension>() {
      public Extension parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Extension(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Extension> getParserForType() {
      return PARSER;
    }

    // repeated .lighthouse.Pledge pledges = 1;
    public static final int PLEDGES_FIELD_NUMBER = 1;
    private java.util.List<lighthouse.protocol.LHProtos.Pledge> pledges_;
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    public java.util.List<lighthouse.protocol.LHProtos.Pledge> getPledgesList() {
      return pledges_;
    }
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    public java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
        getPledgesOrBuilderList() {
      return pledges_;
    }
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    public int getPledgesCount() {
      return pledges_.size();
    }
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    public lighthouse.protocol.LHProtos.Pledge getPledges(int index) {
      return pledges_.get(index);
    }
    /**
     * <code>repeated .lighthouse.Pledge pledges = 1;</code>
     */
    public lighthouse.protocol.LHProtos.PledgeOrBuilder getPledgesOrBuilder(
        int index) {
      return pledges_.get(index);
    }

    // repeated .lighthouse.Project projects = 2;
    public static final int PROJECTS_FIELD_NUMBER = 2;
    private java.util.List<lighthouse.protocol.LHProtos.Project> projects_;
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    public java.util.List<lighthouse.protocol.LHProtos.Project> getProjectsList() {
      return projects_;
    }
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    public java.util.List<? extends lighthouse.protocol.LHProtos.ProjectOrBuilder> 
        getProjectsOrBuilderList() {
      return projects_;
    }
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    public int getProjectsCount() {
      return projects_.size();
    }
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    public lighthouse.protocol.LHProtos.Project getProjects(int index) {
      return projects_.get(index);
    }
    /**
     * <code>repeated .lighthouse.Project projects = 2;</code>
     */
    public lighthouse.protocol.LHProtos.ProjectOrBuilder getProjectsOrBuilder(
        int index) {
      return projects_.get(index);
    }

    // repeated .lighthouse.Pledge revoked_pledges = 3;
    public static final int REVOKED_PLEDGES_FIELD_NUMBER = 3;
    private java.util.List<lighthouse.protocol.LHProtos.Pledge> revokedPledges_;
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    public java.util.List<lighthouse.protocol.LHProtos.Pledge> getRevokedPledgesList() {
      return revokedPledges_;
    }
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    public java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
        getRevokedPledgesOrBuilderList() {
      return revokedPledges_;
    }
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    public int getRevokedPledgesCount() {
      return revokedPledges_.size();
    }
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    public lighthouse.protocol.LHProtos.Pledge getRevokedPledges(int index) {
      return revokedPledges_.get(index);
    }
    /**
     * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
     *
     * <pre>
     * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
     * copy coming back to us.
     *
     * We can see revoked pledges when:
     * (1) The pledge file is hanging around on disk somewhere we can see it.
     * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
     *     yet (e.g. it was not confirmed or we are racing the broadcast).
     * </pre>
     */
    public lighthouse.protocol.LHProtos.PledgeOrBuilder getRevokedPledgesOrBuilder(
        int index) {
      return revokedPledges_.get(index);
    }

    private void initFields() {
      pledges_ = java.util.Collections.emptyList();
      projects_ = java.util.Collections.emptyList();
      revokedPledges_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getPledgesCount(); i++) {
        if (!getPledges(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getProjectsCount(); i++) {
        if (!getProjects(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getRevokedPledgesCount(); i++) {
        if (!getRevokedPledges(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < pledges_.size(); i++) {
        output.writeMessage(1, pledges_.get(i));
      }
      for (int i = 0; i < projects_.size(); i++) {
        output.writeMessage(2, projects_.get(i));
      }
      for (int i = 0; i < revokedPledges_.size(); i++) {
        output.writeMessage(3, revokedPledges_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pledges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pledges_.get(i));
      }
      for (int i = 0; i < projects_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, projects_.get(i));
      }
      for (int i = 0; i < revokedPledges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, revokedPledges_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static lighthouse.wallet.LHWalletProtos.Extension parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(lighthouse.wallet.LHWalletProtos.Extension prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Extension}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements lighthouse.wallet.LHWalletProtos.ExtensionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return lighthouse.wallet.LHWalletProtos.internal_static_Extension_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return lighthouse.wallet.LHWalletProtos.internal_static_Extension_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                lighthouse.wallet.LHWalletProtos.Extension.class, lighthouse.wallet.LHWalletProtos.Extension.Builder.class);
      }

      // Construct using lighthouse.wallet.LHWalletProtos.Extension.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPledgesFieldBuilder();
          getProjectsFieldBuilder();
          getRevokedPledgesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (pledgesBuilder_ == null) {
          pledges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          pledgesBuilder_.clear();
        }
        if (projectsBuilder_ == null) {
          projects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          projectsBuilder_.clear();
        }
        if (revokedPledgesBuilder_ == null) {
          revokedPledges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          revokedPledgesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return lighthouse.wallet.LHWalletProtos.internal_static_Extension_descriptor;
      }

      public lighthouse.wallet.LHWalletProtos.Extension getDefaultInstanceForType() {
        return lighthouse.wallet.LHWalletProtos.Extension.getDefaultInstance();
      }

      public lighthouse.wallet.LHWalletProtos.Extension build() {
        lighthouse.wallet.LHWalletProtos.Extension result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public lighthouse.wallet.LHWalletProtos.Extension buildPartial() {
        lighthouse.wallet.LHWalletProtos.Extension result = new lighthouse.wallet.LHWalletProtos.Extension(this);
        int from_bitField0_ = bitField0_;
        if (pledgesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pledges_ = java.util.Collections.unmodifiableList(pledges_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pledges_ = pledges_;
        } else {
          result.pledges_ = pledgesBuilder_.build();
        }
        if (projectsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            projects_ = java.util.Collections.unmodifiableList(projects_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.projects_ = projects_;
        } else {
          result.projects_ = projectsBuilder_.build();
        }
        if (revokedPledgesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            revokedPledges_ = java.util.Collections.unmodifiableList(revokedPledges_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.revokedPledges_ = revokedPledges_;
        } else {
          result.revokedPledges_ = revokedPledgesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof lighthouse.wallet.LHWalletProtos.Extension) {
          return mergeFrom((lighthouse.wallet.LHWalletProtos.Extension)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(lighthouse.wallet.LHWalletProtos.Extension other) {
        if (other == lighthouse.wallet.LHWalletProtos.Extension.getDefaultInstance()) return this;
        if (pledgesBuilder_ == null) {
          if (!other.pledges_.isEmpty()) {
            if (pledges_.isEmpty()) {
              pledges_ = other.pledges_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePledgesIsMutable();
              pledges_.addAll(other.pledges_);
            }
            onChanged();
          }
        } else {
          if (!other.pledges_.isEmpty()) {
            if (pledgesBuilder_.isEmpty()) {
              pledgesBuilder_.dispose();
              pledgesBuilder_ = null;
              pledges_ = other.pledges_;
              bitField0_ = (bitField0_ & ~0x00000001);
              pledgesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPledgesFieldBuilder() : null;
            } else {
              pledgesBuilder_.addAllMessages(other.pledges_);
            }
          }
        }
        if (projectsBuilder_ == null) {
          if (!other.projects_.isEmpty()) {
            if (projects_.isEmpty()) {
              projects_ = other.projects_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureProjectsIsMutable();
              projects_.addAll(other.projects_);
            }
            onChanged();
          }
        } else {
          if (!other.projects_.isEmpty()) {
            if (projectsBuilder_.isEmpty()) {
              projectsBuilder_.dispose();
              projectsBuilder_ = null;
              projects_ = other.projects_;
              bitField0_ = (bitField0_ & ~0x00000002);
              projectsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getProjectsFieldBuilder() : null;
            } else {
              projectsBuilder_.addAllMessages(other.projects_);
            }
          }
        }
        if (revokedPledgesBuilder_ == null) {
          if (!other.revokedPledges_.isEmpty()) {
            if (revokedPledges_.isEmpty()) {
              revokedPledges_ = other.revokedPledges_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRevokedPledgesIsMutable();
              revokedPledges_.addAll(other.revokedPledges_);
            }
            onChanged();
          }
        } else {
          if (!other.revokedPledges_.isEmpty()) {
            if (revokedPledgesBuilder_.isEmpty()) {
              revokedPledgesBuilder_.dispose();
              revokedPledgesBuilder_ = null;
              revokedPledges_ = other.revokedPledges_;
              bitField0_ = (bitField0_ & ~0x00000004);
              revokedPledgesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRevokedPledgesFieldBuilder() : null;
            } else {
              revokedPledgesBuilder_.addAllMessages(other.revokedPledges_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPledgesCount(); i++) {
          if (!getPledges(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getProjectsCount(); i++) {
          if (!getProjects(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getRevokedPledgesCount(); i++) {
          if (!getRevokedPledges(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        lighthouse.wallet.LHWalletProtos.Extension parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (lighthouse.wallet.LHWalletProtos.Extension) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .lighthouse.Pledge pledges = 1;
      private java.util.List<lighthouse.protocol.LHProtos.Pledge> pledges_ =
        java.util.Collections.emptyList();
      private void ensurePledgesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          pledges_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Pledge>(pledges_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder> pledgesBuilder_;

      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Pledge> getPledgesList() {
        if (pledgesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pledges_);
        } else {
          return pledgesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public int getPledgesCount() {
        if (pledgesBuilder_ == null) {
          return pledges_.size();
        } else {
          return pledgesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public lighthouse.protocol.LHProtos.Pledge getPledges(int index) {
        if (pledgesBuilder_ == null) {
          return pledges_.get(index);
        } else {
          return pledgesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder setPledges(
          int index, lighthouse.protocol.LHProtos.Pledge value) {
        if (pledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePledgesIsMutable();
          pledges_.set(index, value);
          onChanged();
        } else {
          pledgesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder setPledges(
          int index, lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (pledgesBuilder_ == null) {
          ensurePledgesIsMutable();
          pledges_.set(index, builderForValue.build());
          onChanged();
        } else {
          pledgesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder addPledges(lighthouse.protocol.LHProtos.Pledge value) {
        if (pledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePledgesIsMutable();
          pledges_.add(value);
          onChanged();
        } else {
          pledgesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder addPledges(
          int index, lighthouse.protocol.LHProtos.Pledge value) {
        if (pledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePledgesIsMutable();
          pledges_.add(index, value);
          onChanged();
        } else {
          pledgesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder addPledges(
          lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (pledgesBuilder_ == null) {
          ensurePledgesIsMutable();
          pledges_.add(builderForValue.build());
          onChanged();
        } else {
          pledgesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder addPledges(
          int index, lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (pledgesBuilder_ == null) {
          ensurePledgesIsMutable();
          pledges_.add(index, builderForValue.build());
          onChanged();
        } else {
          pledgesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder addAllPledges(
          java.lang.Iterable<? extends lighthouse.protocol.LHProtos.Pledge> values) {
        if (pledgesBuilder_ == null) {
          ensurePledgesIsMutable();
          super.addAll(values, pledges_);
          onChanged();
        } else {
          pledgesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder clearPledges() {
        if (pledgesBuilder_ == null) {
          pledges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          pledgesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public Builder removePledges(int index) {
        if (pledgesBuilder_ == null) {
          ensurePledgesIsMutable();
          pledges_.remove(index);
          onChanged();
        } else {
          pledgesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder getPledgesBuilder(
          int index) {
        return getPledgesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public lighthouse.protocol.LHProtos.PledgeOrBuilder getPledgesOrBuilder(
          int index) {
        if (pledgesBuilder_ == null) {
          return pledges_.get(index);  } else {
          return pledgesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
           getPledgesOrBuilderList() {
        if (pledgesBuilder_ != null) {
          return pledgesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pledges_);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder addPledgesBuilder() {
        return getPledgesFieldBuilder().addBuilder(
            lighthouse.protocol.LHProtos.Pledge.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder addPledgesBuilder(
          int index) {
        return getPledgesFieldBuilder().addBuilder(
            index, lighthouse.protocol.LHProtos.Pledge.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Pledge pledges = 1;</code>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Pledge.Builder> 
           getPledgesBuilderList() {
        return getPledgesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder> 
          getPledgesFieldBuilder() {
        if (pledgesBuilder_ == null) {
          pledgesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder>(
                  pledges_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          pledges_ = null;
        }
        return pledgesBuilder_;
      }

      // repeated .lighthouse.Project projects = 2;
      private java.util.List<lighthouse.protocol.LHProtos.Project> projects_ =
        java.util.Collections.emptyList();
      private void ensureProjectsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          projects_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Project>(projects_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Project, lighthouse.protocol.LHProtos.Project.Builder, lighthouse.protocol.LHProtos.ProjectOrBuilder> projectsBuilder_;

      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Project> getProjectsList() {
        if (projectsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(projects_);
        } else {
          return projectsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public int getProjectsCount() {
        if (projectsBuilder_ == null) {
          return projects_.size();
        } else {
          return projectsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public lighthouse.protocol.LHProtos.Project getProjects(int index) {
        if (projectsBuilder_ == null) {
          return projects_.get(index);
        } else {
          return projectsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder setProjects(
          int index, lighthouse.protocol.LHProtos.Project value) {
        if (projectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectsIsMutable();
          projects_.set(index, value);
          onChanged();
        } else {
          projectsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder setProjects(
          int index, lighthouse.protocol.LHProtos.Project.Builder builderForValue) {
        if (projectsBuilder_ == null) {
          ensureProjectsIsMutable();
          projects_.set(index, builderForValue.build());
          onChanged();
        } else {
          projectsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder addProjects(lighthouse.protocol.LHProtos.Project value) {
        if (projectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectsIsMutable();
          projects_.add(value);
          onChanged();
        } else {
          projectsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder addProjects(
          int index, lighthouse.protocol.LHProtos.Project value) {
        if (projectsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureProjectsIsMutable();
          projects_.add(index, value);
          onChanged();
        } else {
          projectsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder addProjects(
          lighthouse.protocol.LHProtos.Project.Builder builderForValue) {
        if (projectsBuilder_ == null) {
          ensureProjectsIsMutable();
          projects_.add(builderForValue.build());
          onChanged();
        } else {
          projectsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder addProjects(
          int index, lighthouse.protocol.LHProtos.Project.Builder builderForValue) {
        if (projectsBuilder_ == null) {
          ensureProjectsIsMutable();
          projects_.add(index, builderForValue.build());
          onChanged();
        } else {
          projectsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder addAllProjects(
          java.lang.Iterable<? extends lighthouse.protocol.LHProtos.Project> values) {
        if (projectsBuilder_ == null) {
          ensureProjectsIsMutable();
          super.addAll(values, projects_);
          onChanged();
        } else {
          projectsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder clearProjects() {
        if (projectsBuilder_ == null) {
          projects_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          projectsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public Builder removeProjects(int index) {
        if (projectsBuilder_ == null) {
          ensureProjectsIsMutable();
          projects_.remove(index);
          onChanged();
        } else {
          projectsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public lighthouse.protocol.LHProtos.Project.Builder getProjectsBuilder(
          int index) {
        return getProjectsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public lighthouse.protocol.LHProtos.ProjectOrBuilder getProjectsOrBuilder(
          int index) {
        if (projectsBuilder_ == null) {
          return projects_.get(index);  } else {
          return projectsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public java.util.List<? extends lighthouse.protocol.LHProtos.ProjectOrBuilder> 
           getProjectsOrBuilderList() {
        if (projectsBuilder_ != null) {
          return projectsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(projects_);
        }
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public lighthouse.protocol.LHProtos.Project.Builder addProjectsBuilder() {
        return getProjectsFieldBuilder().addBuilder(
            lighthouse.protocol.LHProtos.Project.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public lighthouse.protocol.LHProtos.Project.Builder addProjectsBuilder(
          int index) {
        return getProjectsFieldBuilder().addBuilder(
            index, lighthouse.protocol.LHProtos.Project.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Project projects = 2;</code>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Project.Builder> 
           getProjectsBuilderList() {
        return getProjectsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Project, lighthouse.protocol.LHProtos.Project.Builder, lighthouse.protocol.LHProtos.ProjectOrBuilder> 
          getProjectsFieldBuilder() {
        if (projectsBuilder_ == null) {
          projectsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lighthouse.protocol.LHProtos.Project, lighthouse.protocol.LHProtos.Project.Builder, lighthouse.protocol.LHProtos.ProjectOrBuilder>(
                  projects_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          projects_ = null;
        }
        return projectsBuilder_;
      }

      // repeated .lighthouse.Pledge revoked_pledges = 3;
      private java.util.List<lighthouse.protocol.LHProtos.Pledge> revokedPledges_ =
        java.util.Collections.emptyList();
      private void ensureRevokedPledgesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          revokedPledges_ = new java.util.ArrayList<lighthouse.protocol.LHProtos.Pledge>(revokedPledges_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder> revokedPledgesBuilder_;

      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Pledge> getRevokedPledgesList() {
        if (revokedPledgesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(revokedPledges_);
        } else {
          return revokedPledgesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public int getRevokedPledgesCount() {
        if (revokedPledgesBuilder_ == null) {
          return revokedPledges_.size();
        } else {
          return revokedPledgesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public lighthouse.protocol.LHProtos.Pledge getRevokedPledges(int index) {
        if (revokedPledgesBuilder_ == null) {
          return revokedPledges_.get(index);
        } else {
          return revokedPledgesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder setRevokedPledges(
          int index, lighthouse.protocol.LHProtos.Pledge value) {
        if (revokedPledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevokedPledgesIsMutable();
          revokedPledges_.set(index, value);
          onChanged();
        } else {
          revokedPledgesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder setRevokedPledges(
          int index, lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (revokedPledgesBuilder_ == null) {
          ensureRevokedPledgesIsMutable();
          revokedPledges_.set(index, builderForValue.build());
          onChanged();
        } else {
          revokedPledgesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder addRevokedPledges(lighthouse.protocol.LHProtos.Pledge value) {
        if (revokedPledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevokedPledgesIsMutable();
          revokedPledges_.add(value);
          onChanged();
        } else {
          revokedPledgesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder addRevokedPledges(
          int index, lighthouse.protocol.LHProtos.Pledge value) {
        if (revokedPledgesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevokedPledgesIsMutable();
          revokedPledges_.add(index, value);
          onChanged();
        } else {
          revokedPledgesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder addRevokedPledges(
          lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (revokedPledgesBuilder_ == null) {
          ensureRevokedPledgesIsMutable();
          revokedPledges_.add(builderForValue.build());
          onChanged();
        } else {
          revokedPledgesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder addRevokedPledges(
          int index, lighthouse.protocol.LHProtos.Pledge.Builder builderForValue) {
        if (revokedPledgesBuilder_ == null) {
          ensureRevokedPledgesIsMutable();
          revokedPledges_.add(index, builderForValue.build());
          onChanged();
        } else {
          revokedPledgesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder addAllRevokedPledges(
          java.lang.Iterable<? extends lighthouse.protocol.LHProtos.Pledge> values) {
        if (revokedPledgesBuilder_ == null) {
          ensureRevokedPledgesIsMutable();
          super.addAll(values, revokedPledges_);
          onChanged();
        } else {
          revokedPledgesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder clearRevokedPledges() {
        if (revokedPledgesBuilder_ == null) {
          revokedPledges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          revokedPledgesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public Builder removeRevokedPledges(int index) {
        if (revokedPledgesBuilder_ == null) {
          ensureRevokedPledgesIsMutable();
          revokedPledges_.remove(index);
          onChanged();
        } else {
          revokedPledgesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder getRevokedPledgesBuilder(
          int index) {
        return getRevokedPledgesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public lighthouse.protocol.LHProtos.PledgeOrBuilder getRevokedPledgesOrBuilder(
          int index) {
        if (revokedPledgesBuilder_ == null) {
          return revokedPledges_.get(index);  } else {
          return revokedPledgesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public java.util.List<? extends lighthouse.protocol.LHProtos.PledgeOrBuilder> 
           getRevokedPledgesOrBuilderList() {
        if (revokedPledgesBuilder_ != null) {
          return revokedPledgesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(revokedPledges_);
        }
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder addRevokedPledgesBuilder() {
        return getRevokedPledgesFieldBuilder().addBuilder(
            lighthouse.protocol.LHProtos.Pledge.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public lighthouse.protocol.LHProtos.Pledge.Builder addRevokedPledgesBuilder(
          int index) {
        return getRevokedPledgesFieldBuilder().addBuilder(
            index, lighthouse.protocol.LHProtos.Pledge.getDefaultInstance());
      }
      /**
       * <code>repeated .lighthouse.Pledge revoked_pledges = 3;</code>
       *
       * <pre>
       * We store the pledges we revoked, both for auditing reasons and so we can recognise a (possibly) scrubbed
       * copy coming back to us.
       *
       * We can see revoked pledges when:
       * (1) The pledge file is hanging around on disk somewhere we can see it.
       * (2) Our pledge was handed back to us by a remote server, in case the server didn't notice the revocation tx
       *     yet (e.g. it was not confirmed or we are racing the broadcast).
       * </pre>
       */
      public java.util.List<lighthouse.protocol.LHProtos.Pledge.Builder> 
           getRevokedPledgesBuilderList() {
        return getRevokedPledgesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder> 
          getRevokedPledgesFieldBuilder() {
        if (revokedPledgesBuilder_ == null) {
          revokedPledgesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              lighthouse.protocol.LHProtos.Pledge, lighthouse.protocol.LHProtos.Pledge.Builder, lighthouse.protocol.LHProtos.PledgeOrBuilder>(
                  revokedPledges_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          revokedPledges_ = null;
        }
        return revokedPledgesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Extension)
    }

    static {
      defaultInstance = new Extension(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Extension)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Extension_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Extension_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026wallet-extension.proto\032\024extended-bip70" +
      ".proto\"\204\001\n\tExtension\022#\n\007pledges\030\001 \003(\0132\022." +
      "lighthouse.Pledge\022%\n\010projects\030\002 \003(\0132\023.li" +
      "ghthouse.Project\022+\n\017revoked_pledges\030\003 \003(" +
      "\0132\022.lighthouse.PledgeB%\n\021lighthouse.wall" +
      "etB\016LHWalletProtosH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Extension_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Extension_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Extension_descriptor,
              new java.lang.String[] { "Pledges", "Projects", "RevokedPledges", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          lighthouse.protocol.LHProtos.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
